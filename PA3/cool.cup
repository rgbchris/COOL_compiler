/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

// routines and variables for use by code in grammar placed here
action code {: 

    int curr_lineno() {
      return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
      return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

// allows methods and variables to be placed directly within generated parser class
parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
        String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
           System.err.println("More than 50 errors");
           System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/**
 * TERMINALS (tokens returned to the scanner)
 */

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

// "nonterminal program has type programc
nonterminal programc program;

nonterminal Classes class_list;
nonterminal class_c class;

nonterminal Features feature_list;
nonterminal Feature feature;

nonterminal Formals formal_list;
nonterminal formalc formal;

nonterminal Cases case_list;
nonterminal Case case;

nonterminal Expressions block_expr_list;
nonterminal Expressions expr_list;
nonterminal Expression expr;

nonterminal Lets let_list;
nonterminal let_l let;
/* Precedence declarations go here. */

precedence left DOT, AT, NEG, ISVOID, MULT, MINUS, NOT;
precedence nonassoc LE, LT, EQ;
precedence right ASSIGN;

/**
 * The grammar 
 */

// PROGRAM  ---------------------------------------------------------------------
program	::= class_list:cl                  {: RESULT = new programc(curr_lineno(), cl); :}
          ;

// CLASS ------------------------------------------------------------------------
class_list ::= class:c                   {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	           | class_list:cl class:c     {: RESULT = cl.appendElement(c); :}
	           ;

/* If no parent is specified, the class inherits from the Object class */
class ::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	          {: RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), f, curr_filename()); :}
	      | CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI                    
            {:  RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	      ;


// FEATURE ----------------------------------------------------------------------
/* Feature list may be empty, but no empty features in list. */
feature_list ::= feature:f                     {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
               | feature_list:fl feature:f     {: RESULT = fl.appendElement(f); :}
               ;

feature ::= OBJECTID:o LPAREN formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI     {: RESULT = new method(curr_lineno(), o, fl, t, e); :}
          | OBJECTID:o COLON TYPEID:n ASSIGN expr:e                                              {: RESULT = new attr(curr_lineno(), o, n, e); :}
          | OBJECTID:o COLON TYPEID:n SEMI                                                       {: RESULT = new attr(curr_lineno(), o, n, new no_expr(curr_lineno())); :}
          ;


// FORMAL -----------------------------------------------------------------------
formal_list ::= /**/                       {: RESULT = new Formals(curr_lineno()); :}
              | formal:f                   {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
              | formal_list:fl formal:f    {: RESULT = fl.appendElement(f); :}
              ;

formal ::= OBJECTID:o COLON TYPEID:n       {: RESULT = new formalc(curr_lineno(), o, n); :}
         ; 

// CASE -------------------------------------------------------------------------
case_list ::= case:c                       {: RESULT = (new Cases(curr_lineno())).appendElement(c); :}
            | case_list:cl case:c          {: RESULT = cl.appendElement(c); :}
            ;

case ::= OBJECTID:name COLON TYPEID:type_name DARROW expr:expr SEMI
           {: RESULT = new branch(curr_lineno(), name, type_name, expr); :}
       ;

// EXPRESSION -------------------------------------------------------------------
block_expr_list ::= expr:e SEMI                      {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :} 
                  | block_expr_list:el expr:e SEMI   {: RESULT = el.appendElement(e); :}
                  ;

expr_list ::= expr:e                      {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
            | expr:e COMMA                {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
            | expr_list:el expr:e         {: RESULT = el.appendElement(e); :}
            ;

expr ::= /**/                                     {: RESULT = new no_expr(curr_lineno()); :}
       | OBJECTID:name ASSIGN expr:expr           {: RESULT = new assign(curr_lineno(), name, expr); :}
       | expr:expr AT TYPEID:type_name DOT OBJECTID:name LPAREN expr_list:actual RPAREN  
            {: RESULT = new static_dispatch(curr_lineno(), expr, type_name, name, actual); :}
       | expr:expr DOT OBJECTID:name LPAREN expr_list:actual RPAREN  
            {: RESULT = new dispatch(curr_lineno(), expr, name, actual); :}
       | OBJECTID:name LPAREN expr:expr expr_list:actual RPAREN   
            {: RESULT = new dispatch(curr_lineno(), expr, name, actual); :}
       | IF expr:expr0 THEN expr:expr1 ELSE expr:expr2 FI       
            {: RESULT = new cond(curr_lineno(), expr0, expr1, expr2); :}
       | WHILE expr:expr0 LOOP expr:expr1 POOL    {: RESULT = new loop(curr_lineno(), expr0, expr1); :}
       | LBRACE block_expr_list:exprs RBRACE      {: RESULT = new block(curr_lineno(), exprs); :}
       | LET OBJECTID:name COLON TYPEID:type_name expr:expr1 IN expr:expr2  
            {: RESULT = new let(curr_lineno(), name, type_name, expr1, expr2); :}
       | CASE expr:expr OF case_list:cases ESAC   {: RESULT = new typcase(curr_lineno(), expr, cases); :}
       | NEW TYPEID:type_name                     {: RESULT = new new_(curr_lineno(), type_name); :}
       | ISVOID expr:expr                         {: RESULT = new isvoid(curr_lineno(), expr); :}
       | expr:expr1 PLUS expr:expr2               {: RESULT = new plus(curr_lineno(), expr1, expr2); :}
       | expr:expr1 MINUS expr:expr2              {: RESULT = new sub(curr_lineno(), expr1, expr2); :}
       | expr:expr1 MULT expr:expr2               {: RESULT = new mul(curr_lineno(), expr1, expr2); :}
       | expr:expr1 DIV expr:expr2                {: RESULT = new divide(curr_lineno(), expr1, expr2); :}
       | NEG expr:expr1                           {: RESULT = new neg(curr_lineno(), expr1); :}
       | expr:expr1 LT expr:expr2                 {: RESULT = new lt(curr_lineno(), expr1, expr2); :}
       | expr:expr1 LE expr:expr2                 {: RESULT = new leq(curr_lineno(), expr1, expr2); :}
       | expr:expr1 EQ expr:expr2                 {: RESULT = new eq(curr_lineno(), expr1, expr2); :}
       | NOT expr:expr                            {: RESULT = new comp(curr_lineno(), expr); :}
       | LPAREN expr_list:exprs RPAREN            {: RESULT = new block(curr_lineno(), exprs); :}
       | OBJECTID:name                            {: RESULT = new object(curr_lineno(), name); :}
       | INT_CONST:int_name                       {: RESULT = new int_const(curr_lineno(), int_name); :}
       | STR_CONST:str                            {: RESULT = new string_const(curr_lineno(), str); :}
       | BOOL_CONST:bool                          {: RESULT = new bool_const(curr_lineno(), bool); :}
       ;

/*
  
// LET ---------------------------------------------------------------------------
let_list ::= let:l
               {: RESULT = (new Lets(curr_lineno())).appendElement(l); :}
           | let_list:ll let:l
               {: RESULT = ll.appendElement(l); :}
           ;

let ::= OBJECTID:o COLON TYPEID:n opt_assign:a
          {: RESULT = new let_l(curr_lineno(), o, n, a); :}
      ;

*/





