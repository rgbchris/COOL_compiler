/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

// routines and variables for use by code in grammar placed here
action code {: 

    int curr_lineno() {
      return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
      return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

// allows methods and variables to be placed directly within generated parser class
parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
        String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
           System.err.println("More than 50 errors");
           System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/**
 * TERMINALS (tokens returned to the scanner)
 */

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

// "nonterminal program has type programc
nonterminal programc program;

nonterminal Classes class_list;
nonterminal class_c class;

nonterminal Features feature_list;
nonterminal feature_f feature;

nonterminal Formals formal_list;
nonterminal formal_f formal;

nonterminal Expressions expr_list;
nonterminal expr_e expr;

nonterminal Lets let_list;
nonterminal let_l let;

nonterminal opt_assign expr; 

/* Precedence declarations go here. */

/**
 * The grammar 
 */

// PROGRAM  ---------------------------------------------------------------------
program	::= class_list:cl
	            {: RESULT = new programc(curr_lineno(), cl); :}
          ;

// CLASS ------------------------------------------------------------------------
class_list ::= class:c // single class
	               {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	           | class_list:cl class:c // list of classes
	               {: RESULT = cl.appendElement(c); :}
	           ;

/* If no parent is specified, the class inherits from the Object class */
class ::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	          {: RESULT = new class_c(curr_lineno(), n, AbstractTable.idtable.addString("Object"), f, curr_filename()); :}
	      | CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	          {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	      ;


// FEATURE ----------------------------------------------------------------------
/* Feature list may be empty, but no empty features in list. */
feature_list ::= feature:f
                   {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
               | feature_list:fl feature:f
                   {: RESULT = fl.appendElement(f); :}
               ;

feature ::= OBJECTID:o LPAREN formal:f formal_list:fl RPAREN COLON TYPEID:t LBRACE expr:e RBRACE
              {: RESULT = new feature_f(curr_lineno(), o, f, fl, t, e); :}
          | OBJECTID:o COLON TYPEID:n opt_assign:a
              {: RESULT = new feature_f(curr_lineno(), o, n, a); :}
          ;


// FORMAL -----------------------------------------------------------------------
formal_list ::= formal:f
                   {: RESULT = (new Formals(curr_lineno()).appendElement(f)) :}
              | formal_list:fl formal:f
                   {: RESULT = fl.appendElement(f) :}
              ;

formal ::= /* empty */
             {: /**/ :}
         | OBJECTID:o COLON TYPEID:n
	           {: RESULT = new formal_f(curr_lineno(), o, n); :}
         ; 

// EXPRESSION -------------------------------------------------------------------
expr_list ::= expr:e 
                {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
            | expr_list:el expr:e
                {: RESULT = el.appendElement(e); :}
            ;

expr ::= OBJECTID:o ASSIGN expr:e
           {: RESULT = new expr_e(curr_lineno(), o, e); :}
       | expr:e LBRACE AT TYPEID:n RBRACE DOT OBJECTID:o LPAREN LBRACE expr_list:el RBRACE RPAREN
           {: RESULT = new expr_e(curr_lineno(), e, n, o, el); :}
       | OBJECTID:o LPAREN LBRACE expr_list:el RBRACE RPAREN
           {: RESULT = new expr_e(curr_lineno(), o, el); :}
       | IF expr:e0 THEN expr:e1 ELSE expr:e2 FI
           {: RESULT = new expr_e(curr_lineno(), e0, e1, e2); :}
       | WHILE expr:e0 LOOP expr:e1 POOL
           {: RESULT = new expr_e(curr_lineno(), e0, e1); :}
       | LBRACE // *
           {: RESULT = new expr_e(curr_lineno(), ); :}
       | LET let:l let_list:ll IN expr:e
           {: RESULT = new expr_e(curr_lineno(), l, ll, e); :}
       | CASE expr:e OF OBJECTID:o COLON TYPEID:n ESAC
           {: RESULT = new expr_e(curr_lineno(), l, ll, e); :}
       ;
  
// LET ---------------------------------------------------------------------------
let_list ::= let:l
               {: RESULT = (new Lets(curr_lineno())).appendElement(l); :}
           | let_list:ll let:l
               {: RESULT = ll.appendElement(l); :}
           ;

let ::= OBJECTID:o COLON TYPEID:n opt_assign:a
          {: RESULT = new let_l(curr_lineno(, o, n, a)); :}
      ;

// OPTIONAL ASSIGN ---------------------------------------------------------------
opt_assign ::= /* empty */
                {: /**/ :}
             | ASSIGN expr:e
                {: RESULT = new opt_assign(curr_lineno(), e); :}   
             ;






